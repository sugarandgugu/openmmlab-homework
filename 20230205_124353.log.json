{"env_info": "sys.platform: linux\nPython: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.1+cu113\nOpenCV: 4.6.0\nMMCV: 1.6.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMClassification: 0.23.2+90254a8", "seed": 528603072, "mmcls_version": "0.23.2", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet',\n        depth=34,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=512,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, )))\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=128,\n    workers_per_gpu=4,\n    train=dict(\n        type='ImageNet',\n        data_prefix='./',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        ann_file='data/flower/train.txt',\n        classes='data/flower/classes.txt'),\n    val=dict(\n        type='ImageNet',\n        data_prefix='./',\n        ann_file='data/flower/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        classes='data/flower/classes.txt'),\n    test=dict(\n        type='ImageNet',\n        data_prefix='data/imagenet/val',\n        ann_file='data/imagenet/meta/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1)),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=3, metric=['accuracy', 'recall', 'f1_score', 'precision'])\noptimizer = dict(type='AdamW', lr=0.0015, weight_decay=0.3)\noptimizer_config = dict(grad_clip=dict(max_norm=1.0))\nparamwise_cfg = dict(\n    custom_keys=dict({\n        '.backbone.cls_token': dict(decay_mult=0.0),\n        '.backbone.pos_embed': dict(decay_mult=0.0)\n    }))\nlr_config = dict(\n    policy='CosineAnnealing',\n    min_lr=0,\n    warmup='linear',\n    warmup_iters=10000,\n    warmup_ratio=0.0001)\nrunner = dict(type='EpochBasedRunner', max_epochs=300)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoin/resnet34_batch256_imagenet_20200708-32ffb4f7.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'work_dirs/resnet34'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 528603072\n", "CLASSES": ["sunflower", "tulip", "rose", "dandelion", "daisy"]}
{"mode": "val", "epoch": 3, "iter": 5, "lr": 1e-05, "accuracy_top-1": 79.8951, "accuracy_top-5": 100.0, "precision": 80.63489, "recall": 79.94222, "f1_score": 80.01157}
{"mode": "val", "epoch": 6, "iter": 5, "lr": 2e-05, "accuracy_top-1": 93.70629, "accuracy_top-5": 100.0, "precision": 93.89842, "recall": 93.77357, "f1_score": 93.79614}
{"mode": "val", "epoch": 9, "iter": 5, "lr": 2e-05, "accuracy_top-1": 95.45454, "accuracy_top-5": 100.0, "precision": 95.63125, "recall": 95.48809, "f1_score": 95.52367}
{"mode": "val", "epoch": 12, "iter": 5, "lr": 3e-05, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0, "precision": 96.02919, "recall": 95.82997, "f1_score": 95.8825}
{"mode": "val", "epoch": 15, "iter": 5, "lr": 4e-05, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.58218, "recall": 96.5484, "f1_score": 96.56056}
{"mode": "val", "epoch": 18, "iter": 5, "lr": 5e-05, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.58354, "recall": 96.52798, "f1_score": 96.54582}
{"mode": "val", "epoch": 21, "iter": 5, "lr": 6e-05, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0, "precision": 96.40316, "recall": 96.3723, "f1_score": 96.38141}
{"mode": "val", "epoch": 24, "iter": 5, "lr": 6e-05, "accuracy_top-1": 97.2028, "accuracy_top-5": 100.0, "precision": 97.32088, "recall": 97.21502, "f1_score": 97.25271}
{"mode": "val", "epoch": 27, "iter": 5, "lr": 7e-05, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.66087, "recall": 96.54179, "f1_score": 96.54276}
{"mode": "val", "epoch": 30, "iter": 5, "lr": 8e-05, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0, "precision": 96.41509, "recall": 96.38326, "f1_score": 96.38708}
{"mode": "val", "epoch": 33, "iter": 5, "lr": 9e-05, "accuracy_top-1": 95.97902, "accuracy_top-5": 100.0, "precision": 96.14362, "recall": 95.97242, "f1_score": 96.03657}
{"mode": "val", "epoch": 36, "iter": 5, "lr": 9e-05, "accuracy_top-1": 96.85315, "accuracy_top-5": 100.0, "precision": 96.92889, "recall": 96.88657, "f1_score": 96.89707}
{"mode": "val", "epoch": 39, "iter": 5, "lr": 0.0001, "accuracy_top-1": 94.40559, "accuracy_top-5": 100.0, "precision": 94.94043, "recall": 94.42343, "f1_score": 94.49823}
{"mode": "val", "epoch": 42, "iter": 5, "lr": 0.00011, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0, "precision": 95.73571, "recall": 95.68236, "f1_score": 95.69276}
{"mode": "val", "epoch": 45, "iter": 5, "lr": 0.00012, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.721, "recall": 96.44579, "f1_score": 96.52757}
{"mode": "val", "epoch": 48, "iter": 5, "lr": 0.00012, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.55158, "recall": 96.5542, "f1_score": 96.53276}
{"mode": "val", "epoch": 51, "iter": 5, "lr": 0.00013, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0, "precision": 95.95021, "recall": 95.80911, "f1_score": 95.86359}
{"mode": "val", "epoch": 54, "iter": 5, "lr": 0.00013, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0, "precision": 96.38743, "recall": 96.35187, "f1_score": 96.36424}
{"mode": "val", "epoch": 57, "iter": 5, "lr": 0.00014, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0, "precision": 95.13845, "recall": 94.76966, "f1_score": 94.83214}
{"mode": "val", "epoch": 60, "iter": 5, "lr": 0.00015, "accuracy_top-1": 96.15385, "accuracy_top-5": 100.0, "precision": 96.26352, "recall": 96.18673, "f1_score": 96.18898}
{"mode": "val", "epoch": 63, "iter": 5, "lr": 0.00015, "accuracy_top-1": 92.13287, "accuracy_top-5": 100.0, "precision": 93.14684, "recall": 92.07817, "f1_score": 92.28698}
{"mode": "val", "epoch": 66, "iter": 5, "lr": 0.00016, "accuracy_top-1": 95.97902, "accuracy_top-5": 100.0, "precision": 96.1503, "recall": 96.0294, "f1_score": 96.02014}
{"mode": "val", "epoch": 69, "iter": 5, "lr": 0.00016, "accuracy_top-1": 95.27972, "accuracy_top-5": 100.0, "precision": 95.68461, "recall": 95.26968, "f1_score": 95.36878}
{"mode": "val", "epoch": 72, "iter": 5, "lr": 0.00017, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0, "precision": 95.09973, "recall": 94.77255, "f1_score": 94.87504}
{"mode": "val", "epoch": 75, "iter": 5, "lr": 0.00017, "accuracy_top-1": 92.83217, "accuracy_top-5": 100.0, "precision": 93.02601, "recall": 92.88662, "f1_score": 92.86873}
{"mode": "val", "epoch": 78, "iter": 5, "lr": 0.00018, "accuracy_top-1": 95.97902, "accuracy_top-5": 100.0, "precision": 96.06536, "recall": 96.01472, "f1_score": 96.02706}
{"mode": "val", "epoch": 81, "iter": 5, "lr": 0.00018, "accuracy_top-1": 95.27972, "accuracy_top-5": 100.0, "precision": 95.4987, "recall": 95.24592, "f1_score": 95.32169}
{"mode": "val", "epoch": 84, "iter": 5, "lr": 0.00019, "accuracy_top-1": 94.75525, "accuracy_top-5": 100.0, "precision": 95.0376, "recall": 94.71972, "f1_score": 94.82017}
{"mode": "val", "epoch": 87, "iter": 5, "lr": 0.00019, "accuracy_top-1": 94.58042, "accuracy_top-5": 100.0, "precision": 94.94624, "recall": 94.58557, "f1_score": 94.63583}
{"mode": "val", "epoch": 90, "iter": 5, "lr": 0.00019, "accuracy_top-1": 95.1049, "accuracy_top-5": 100.0, "precision": 95.47514, "recall": 95.1648, "f1_score": 95.17552}
{"mode": "val", "epoch": 93, "iter": 5, "lr": 0.0002, "accuracy_top-1": 93.53147, "accuracy_top-5": 100.0, "precision": 93.92799, "recall": 93.59495, "f1_score": 93.59536}
{"mode": "val", "epoch": 96, "iter": 5, "lr": 0.0002, "accuracy_top-1": 94.40559, "accuracy_top-5": 100.0, "precision": 94.81218, "recall": 94.4412, "f1_score": 94.5384}
{"mode": "val", "epoch": 99, "iter": 5, "lr": 0.0002, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0, "precision": 95.88959, "recall": 95.82915, "f1_score": 95.83567}
{"mode": "val", "epoch": 102, "iter": 5, "lr": 0.00021, "accuracy_top-1": 94.58042, "accuracy_top-5": 100.0, "precision": 94.86252, "recall": 94.55786, "f1_score": 94.64104}
{"mode": "val", "epoch": 105, "iter": 5, "lr": 0.00021, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0, "precision": 96.52324, "recall": 96.24781, "f1_score": 96.32215}
{"mode": "val", "epoch": 108, "iter": 5, "lr": 0.00021, "accuracy_top-1": 97.02797, "accuracy_top-5": 100.0, "precision": 97.08541, "recall": 97.04843, "f1_score": 97.05134}
{"mode": "val", "epoch": 111, "iter": 5, "lr": 0.00021, "accuracy_top-1": 95.1049, "accuracy_top-5": 100.0, "precision": 95.19739, "recall": 95.14809, "f1_score": 95.13626}
{"mode": "val", "epoch": 114, "iter": 5, "lr": 0.00021, "accuracy_top-1": 96.32867, "accuracy_top-5": 100.0, "precision": 96.4789, "recall": 96.3496, "f1_score": 96.37135}
{"mode": "val", "epoch": 117, "iter": 5, "lr": 0.00021, "accuracy_top-1": 95.62937, "accuracy_top-5": 100.0, "precision": 95.80055, "recall": 95.61528, "f1_score": 95.67991}
{"mode": "val", "epoch": 120, "iter": 5, "lr": 0.00021, "accuracy_top-1": 94.40559, "accuracy_top-5": 100.0, "precision": 94.76702, "recall": 94.38978, "f1_score": 94.48862}
{"mode": "val", "epoch": 123, "iter": 5, "lr": 0.00021, "accuracy_top-1": 94.93007, "accuracy_top-5": 100.0, "precision": 95.36198, "recall": 94.84663, "f1_score": 94.9568}
{"mode": "val", "epoch": 126, "iter": 5, "lr": 0.00021, "accuracy_top-1": 95.8042, "accuracy_top-5": 100.0, "precision": 95.95376, "recall": 95.88613, "f1_score": 95.81801}
{"mode": "val", "epoch": 129, "iter": 5, "lr": 0.00021, "accuracy_top-1": 96.50349, "accuracy_top-5": 100.0, "precision": 96.69391, "recall": 96.47056, "f1_score": 96.52986}
