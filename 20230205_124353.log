2023-02-05 12:43:53,819 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.10.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.1+cu113
OpenCV: 4.6.0
MMCV: 1.6.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.23.2+90254a8
------------------------------------------------------------

2023-02-05 12:43:53,819 - mmcls - INFO - Distributed training: False
2023-02-05 12:43:53,977 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=34,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=128,
    workers_per_gpu=4,
    train=dict(
        type='ImageNet',
        data_prefix='./',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower/train.txt',
        classes='data/flower/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='./',
        ann_file='data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=3, metric=['accuracy', 'recall', 'f1_score', 'precision'])
optimizer = dict(type='AdamW', lr=0.0015, weight_decay=0.3)
optimizer_config = dict(grad_clip=dict(max_norm=1.0))
paramwise_cfg = dict(
    custom_keys=dict({
        '.backbone.cls_token': dict(decay_mult=0.0),
        '.backbone.pos_embed': dict(decay_mult=0.0)
    }))
lr_config = dict(
    policy='CosineAnnealing',
    min_lr=0,
    warmup='linear',
    warmup_iters=10000,
    warmup_ratio=0.0001)
runner = dict(type='EpochBasedRunner', max_epochs=300)
checkpoint_config = dict(interval=5)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoin/resnet34_batch256_imagenet_20200708-32ffb4f7.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work_dirs/resnet34'
gpu_ids = [0]

2023-02-05 12:43:53,978 - mmcls - INFO - Set random seed to 528603072, deterministic: False
2023-02-05 12:43:54,156 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 12:43:54,306 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 12:43:59,019 - mmcls - INFO - load checkpoint from local path: checkpoin/resnet34_batch256_imagenet_20200708-32ffb4f7.pth
2023-02-05 12:43:59,132 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 12:43:59,139 - mmcls - INFO - Start running, host: root@autodl-container-b8cd118952-852f85fd, work_dir: /root/autodl-tmp/mmclassification/work_dirs/resnet34
2023-02-05 12:43:59,139 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 12:43:59,139 - mmcls - INFO - workflow: [('train', 1)], max: 300 epochs
2023-02-05 12:43:59,140 - mmcls - INFO - Checkpoints will be saved to /root/autodl-tmp/mmclassification/work_dirs/resnet34 by HardDiskBackend.
2023-02-05 12:44:23,778 - mmcls - INFO - Epoch(val) [3][5]	accuracy_top-1: 79.8951, accuracy_top-5: 100.0000, precision: 80.6349, recall: 79.9422, f1_score: 80.0116
2023-02-05 12:44:38,778 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 12:44:47,704 - mmcls - INFO - Epoch(val) [6][5]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000, precision: 93.8984, recall: 93.7736, f1_score: 93.7961
2023-02-05 12:45:11,095 - mmcls - INFO - Epoch(val) [9][5]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000, precision: 95.6313, recall: 95.4881, f1_score: 95.5237
2023-02-05 12:45:18,502 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 12:45:34,956 - mmcls - INFO - Epoch(val) [12][5]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000, precision: 96.0292, recall: 95.8300, f1_score: 95.8825
2023-02-05 12:45:57,392 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 12:45:58,852 - mmcls - INFO - Epoch(val) [15][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.5822, recall: 96.5484, f1_score: 96.5606
2023-02-05 12:46:22,241 - mmcls - INFO - Epoch(val) [18][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.5835, recall: 96.5280, f1_score: 96.5458
2023-02-05 12:46:37,202 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 12:46:46,227 - mmcls - INFO - Epoch(val) [21][5]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000, precision: 96.4032, recall: 96.3723, f1_score: 96.3814
2023-02-05 12:47:09,550 - mmcls - INFO - Epoch(val) [24][5]	accuracy_top-1: 97.2028, accuracy_top-5: 100.0000, precision: 97.3209, recall: 97.2150, f1_score: 97.2527
2023-02-05 12:47:17,031 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 12:47:33,473 - mmcls - INFO - Epoch(val) [27][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.6609, recall: 96.5418, f1_score: 96.5428
2023-02-05 12:47:55,943 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 12:47:57,390 - mmcls - INFO - Epoch(val) [30][5]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000, precision: 96.4151, recall: 96.3833, f1_score: 96.3871
2023-02-05 12:48:20,774 - mmcls - INFO - Epoch(val) [33][5]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000, precision: 96.1436, recall: 95.9724, f1_score: 96.0366
2023-02-05 12:48:35,769 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 12:48:44,770 - mmcls - INFO - Epoch(val) [36][5]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000, precision: 96.9289, recall: 96.8866, f1_score: 96.8971
2023-02-05 12:49:08,072 - mmcls - INFO - Epoch(val) [39][5]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000, precision: 94.9404, recall: 94.4234, f1_score: 94.4982
2023-02-05 12:49:15,655 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 12:49:32,113 - mmcls - INFO - Epoch(val) [42][5]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000, precision: 95.7357, recall: 95.6824, f1_score: 95.6928
2023-02-05 12:49:54,537 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 12:49:55,997 - mmcls - INFO - Epoch(val) [45][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.7210, recall: 96.4458, f1_score: 96.5276
2023-02-05 12:50:19,412 - mmcls - INFO - Epoch(val) [48][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.5516, recall: 96.5542, f1_score: 96.5328
2023-02-05 12:50:34,366 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 12:50:43,381 - mmcls - INFO - Epoch(val) [51][5]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000, precision: 95.9502, recall: 95.8091, f1_score: 95.8636
2023-02-05 12:51:06,788 - mmcls - INFO - Epoch(val) [54][5]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000, precision: 96.3874, recall: 96.3519, f1_score: 96.3642
2023-02-05 12:51:14,252 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 12:51:30,700 - mmcls - INFO - Epoch(val) [57][5]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000, precision: 95.1384, recall: 94.7697, f1_score: 94.8321
2023-02-05 12:51:53,309 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 12:51:54,735 - mmcls - INFO - Epoch(val) [60][5]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000, precision: 96.2635, recall: 96.1867, f1_score: 96.1890
2023-02-05 12:52:18,184 - mmcls - INFO - Epoch(val) [63][5]	accuracy_top-1: 92.1329, accuracy_top-5: 100.0000, precision: 93.1468, recall: 92.0782, f1_score: 92.2870
2023-02-05 12:52:33,226 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 12:52:42,220 - mmcls - INFO - Epoch(val) [66][5]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000, precision: 96.1503, recall: 96.0294, f1_score: 96.0201
2023-02-05 12:53:05,528 - mmcls - INFO - Epoch(val) [69][5]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000, precision: 95.6846, recall: 95.2697, f1_score: 95.3688
2023-02-05 12:53:12,948 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 12:53:29,336 - mmcls - INFO - Epoch(val) [72][5]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000, precision: 95.0997, recall: 94.7726, f1_score: 94.8750
2023-02-05 12:53:51,936 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 12:53:53,454 - mmcls - INFO - Epoch(val) [75][5]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000, precision: 93.0260, recall: 92.8866, f1_score: 92.8687
2023-02-05 12:54:16,794 - mmcls - INFO - Epoch(val) [78][5]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000, precision: 96.0654, recall: 96.0147, f1_score: 96.0271
2023-02-05 12:54:31,840 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 12:54:40,861 - mmcls - INFO - Epoch(val) [81][5]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000, precision: 95.4987, recall: 95.2459, f1_score: 95.3217
2023-02-05 12:55:04,312 - mmcls - INFO - Epoch(val) [84][5]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000, precision: 95.0376, recall: 94.7197, f1_score: 94.8202
2023-02-05 12:55:11,881 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 12:55:28,304 - mmcls - INFO - Epoch(val) [87][5]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000, precision: 94.9462, recall: 94.5856, f1_score: 94.6358
2023-02-05 12:55:50,733 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 12:55:52,164 - mmcls - INFO - Epoch(val) [90][5]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000, precision: 95.4751, recall: 95.1648, f1_score: 95.1755
2023-02-05 12:56:15,506 - mmcls - INFO - Epoch(val) [93][5]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000, precision: 93.9280, recall: 93.5950, f1_score: 93.5954
2023-02-05 12:56:30,563 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 12:56:39,482 - mmcls - INFO - Epoch(val) [96][5]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000, precision: 94.8122, recall: 94.4412, f1_score: 94.5384
2023-02-05 12:57:02,937 - mmcls - INFO - Epoch(val) [99][5]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000, precision: 95.8896, recall: 95.8292, f1_score: 95.8357
2023-02-05 12:57:10,438 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 12:57:26,991 - mmcls - INFO - Epoch(val) [102][5]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000, precision: 94.8625, recall: 94.5579, f1_score: 94.6410
2023-02-05 12:57:49,554 - mmcls - INFO - Saving checkpoint at 105 epochs
2023-02-05 12:57:50,968 - mmcls - INFO - Epoch(val) [105][5]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000, precision: 96.5232, recall: 96.2478, f1_score: 96.3222
2023-02-05 12:58:14,470 - mmcls - INFO - Epoch(val) [108][5]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000, precision: 97.0854, recall: 97.0484, f1_score: 97.0513
2023-02-05 12:58:29,591 - mmcls - INFO - Saving checkpoint at 110 epochs
2023-02-05 12:58:38,566 - mmcls - INFO - Epoch(val) [111][5]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000, precision: 95.1974, recall: 95.1481, f1_score: 95.1363
2023-02-05 12:59:02,062 - mmcls - INFO - Epoch(val) [114][5]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000, precision: 96.4789, recall: 96.3496, f1_score: 96.3713
2023-02-05 12:59:09,552 - mmcls - INFO - Saving checkpoint at 115 epochs
2023-02-05 12:59:26,062 - mmcls - INFO - Epoch(val) [117][5]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000, precision: 95.8005, recall: 95.6153, f1_score: 95.6799
2023-02-05 12:59:48,615 - mmcls - INFO - Saving checkpoint at 120 epochs
2023-02-05 12:59:50,151 - mmcls - INFO - Epoch(val) [120][5]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000, precision: 94.7670, recall: 94.3898, f1_score: 94.4886
2023-02-05 13:00:13,732 - mmcls - INFO - Epoch(val) [123][5]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000, precision: 95.3620, recall: 94.8466, f1_score: 94.9568
2023-02-05 13:00:28,745 - mmcls - INFO - Saving checkpoint at 125 epochs
2023-02-05 13:00:37,784 - mmcls - INFO - Epoch(val) [126][5]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000, precision: 95.9538, recall: 95.8861, f1_score: 95.8180
2023-02-05 13:01:01,470 - mmcls - INFO - Epoch(val) [129][5]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000, precision: 96.6939, recall: 96.4706, f1_score: 96.5299
2023-02-05 13:01:09,017 - mmcls - INFO - Saving checkpoint at 130 epochs
